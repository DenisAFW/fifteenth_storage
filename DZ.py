# Возьмите любые 1-3 задания из прошлых домашних заданий. Добавьте к ним логирование ошибок и полезной информации.
# Также реализуйте возможность запуска из командной строки с передачей параметров.
# Данная промежуточная аттестация оценивается по системе "зачет" / "не зачет" "Зачет" ставится,
# если Слушатель успешно выполнил задание. "Незачет" ставится, если Слушатель не выполнил задание.
# Критерии оценивания: 1 - Слушатель написал корректный код для задачи,
# добавил к ним логирование ошибок и полезной информации.
# -------------------------------------------------------

# 2.Треугольник существует только тогда, когда сумма любых двух его сторон больше третьей.
# Дано a, b, c - стороны предполагаемого треугольника. Требуется сравнить длину каждого отрезка-стороны с
# суммой двух других. Если хотя бы в одном случае отрезок окажется больше суммы двух других, то треугольника с
# такими сторонами не существует. Отдельно сообщить является ли треугольник разносторонним,
# равнобедренным или равносторонним.

import argparse
import logging

logging.basicConfig(filename='project.log', filemode='a', encoding='utf-8', level=logging.NOTSET)
logger = logging.getLogger(__name__)


def triangle(numbers: list):
    a, b, c = numbers[0], numbers[1], numbers[2]
    if a < b + c and b < a + c and c < a + b:
        if a == b == c:
            print('Треугольник ялвляется равносторонним')
            logger.info(f'Треугольник со сторонами {a=}, {b=}, {c=} ялвляется равносторонним')
        elif a == b or a == c or b == c:
            print('Треугольник является равнобедренным')
            logger.info(f'Треугольник со сторонами {a=}, {b=}, {c=} является равнобедренным')
        else:
            print('Треугольник разносторонний')
            logger.info(f'Треугольник со сторонами {a=}, {b=}, {c=} разносторонний')

    else:
        print('Такой треугольник не существует')
        logger.info(f'Треугольник со сторонами {a=}, {b=}, {c=} не существует')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Holy triangle")
    parser.add_argument('sides', metavar='N', type=int, nargs='*', help='input 3 numbers for treangle')
    args = parser.parse_args()
    triangle(args.sides)
    # print(args)
